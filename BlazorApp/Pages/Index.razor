@page "/"
@using BlazorApp.Data
@inject EmployeeService EmployeeService
@using Humanizer

<PageTitle>Home</PageTitle>

<div class="topFade"></div>

<!-- Search forms and employee list can remain as before -->
<form>
	<input type="text" placeholder="Enter search term"
		   @bind="searchTerm"
		   @bind:event="oninput"
		   @bind:after="Search" />
	<label for="searchType"> Search by:</label>
	<select id="searchType" @bind="selectedSearchType">
		<option value="Message Control ID">Message Control ID</option>
		<option value="MRN">MRN</option>
		<option value="Last Name">Last Name</option>
	</select>
</form>


<body>
	<div class="container">
		@if (EmployeeService.recordsLoading)
		{
			<p>Loading records, please wait...</p>
		}
		else if (@* EmployeeService.searchResults != null &&  *@visibleCount != 0)
		{
			@foreach (Tools.Message msg in EmployeeService.hl7Messages
					.OrderBy(record => record.MessageHeader.DateTimeOfMessage)
					.Where(x => x.MessageHeader.MessageControlId == searchTerm || selectedSearchType != "Message Control ID")
					.Where(y => y.PatientIdentification.PatientID == searchTerm || selectedSearchType != "MRN")
					.Where(z => z.PatientIdentification.PatientNames/*.FamilyName*/.Contains(searchTerm) || selectedSearchType != "Last Name")
					.Take(visibleCount))
			{
				

				<RecordCard msg="@msg" />
			}
			if (EmployeeService.hl7Messages.Count == 0)
			{
				<p>No results</p>
			}
			if (EmployeeService.hl7Messages.Count > 10 && EmployeeService.hl7Messages.Count > visibleCount)
			{
				<div class="box" style="width:calc(90% + 30px); height:10%;">
					<center>
						Showing @Math.Min(/* EmployeeService.searchResults.Count,  */999999, visibleCount) of @* @EmployeeService.searchResults.Count *@ matching employees.<br />
						<a class="underline" @onclick="() => visibleCount += 10">Click here to see more</a>
					</center>
				</div>
			}
		}
		else if (EmployeeService.isLoading)
		{
			<p>Loading employees, please wait...</p>
		}
	</div>
</body>

<div class="bottomFade"></div>

@code {
	private int visibleCount = 2000;

	private string selectedSearchType;
	private string searchTerm = "";


	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{
			_ = EmployeeService.LoadHL7RecordsAsync();
			EmployeeService.OnHL7MessagesLoaded += StateHasChanged; // Update UI when messages load
		}

	}

	private void Search()
	{
		visibleCount = 10; // Reset visibleCount on new search
		//EmployeeService.SearchEmployees();

		// if (string.IsNullOrEmpty(EmployeeService.searchId) && string.IsNullOrEmpty(EmployeeService.searchName))
		if (string.IsNullOrEmpty(searchTerm)) visibleCount = 0;
		StateHasChanged();
	}
}

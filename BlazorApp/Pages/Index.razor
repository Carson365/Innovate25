@page "/"
@using BlazorApp.Data
@inject EmployeeService EmployeeService
@using Humanizer

<PageTitle>Home</PageTitle>

<div class="topFade"></div>

<!-- Search forms and employee list can remain as before -->
<form>
    <input style="margin-top: 1em;" type="text" placeholder="Search an ID"
    @bind="EmployeeService.searchId"
    @bind:event="oninput"
    @bind:after="SearchEmployee" />
</form>
<form>
    <input type="text" placeholder="Search a Name"
    @bind="EmployeeService.searchName"
    @bind:event="oninput"
    @bind:after="SearchEmployee" />
</form>

<body>
    <div class="container">
        <!-- Display parsed HL7 messages -->
        @if (!EmployeeService.recordsLoading)
        {
            <h3>HL7 Messages</h3>
            @foreach (Tools.Message msg in EmployeeService.hl7Messages.Take(10))
            {
                <div class="box hl7-message">
                    @* Loop through each segment property in msg *@
                    @foreach (var segmentProperty in msg.GetType().GetProperties())
                    {
                        var segmentData = segmentProperty.GetValue(msg);
                        if (segmentData != null)
                        {
                            <h4>@segmentProperty.Name</h4>
                            @foreach (var field in segmentData.GetType().GetProperties())
                            {
                                var fieldValue = field.GetValue(segmentData);
                                if (fieldValue != null && !string.IsNullOrWhiteSpace(fieldValue.ToString()))
                                {
                                    <p>
                                        <strong>@field.Name.Humanize(LetterCasing.Title): </strong>
                                        @{
                                            // Check if the field is an enumerable collection (but not a string)
                                            if (fieldValue is System.Collections.IEnumerable enumerable && !(fieldValue is string))
                                            {
                                                var list = enumerable.Cast<object>();
                                                @string.Join(", ", list)
                                            }
                                            else
                                            {
                                                @fieldValue.ToString()
                                            }
                                        }
                                    </p>
                                }
                            }
                        }
                    }
                </div>

            }
        }
        else if (EmployeeService.isLoading)
        {
            <p>Loading employees, please wait...</p>
        }

        <!-- Display employee search results -->
        @if (EmployeeService.searchResults != null && EmployeeService.searchResults.Any())
        {
            @foreach (Employee item in EmployeeService.searchResults)
            {
                <div class="box">
                    <EmployeeCard Employee="@item"></EmployeeCard>
                </div>
            }
        }
    </div>
</body>

<div class="bottomFade"></div>

@code {
    private int visibleCount;

    protected override async Task OnInitializedAsync()
    {
        // Load employees and HL7 records in the background.
        _ = EmployeeService.LoadEmployeesAsync();
        _ = EmployeeService.LoadHL7RecordsAsync();
        EmployeeService.OnHL7MessagesLoaded += StateHasChanged; // Update UI when messages load

    }

    private void SearchEmployee()
    {
        visibleCount = 100; // Reset visibleCount on new search
        EmployeeService.SearchEmployees();

        if (string.IsNullOrEmpty(EmployeeService.searchId) && string.IsNullOrEmpty(EmployeeService.searchName))
            visibleCount = 0;
    }
}

@page "/"
@page "/search/{id}"
@using BlazorApp.Data
@inject EmployeeService EmployeeService
@using Humanizer

<PageTitle>Home</PageTitle>

<div class="topFade"></div>

<form>
    <input type="text" placeholder="Enter search term"
    @bind="searchTerm"
    @bind:event="oninput"
    @bind:after="Search" />
    <label for="searchType"> Search by:</label>
    <select id="searchType" @bind="selectedSearchType">
        <option value="Message Control ID">Message Control ID</option>
        <option value="MRN">MRN</option>
        <option value="Last Name">Last Name</option>
    </select>
</form>

<body>
    <div class="container">
        @if (EmployeeService.recordsLoading)
        {
            <p>Loading records, please wait...</p>
        }
        else
        {
            <!-- Compute filtered messages based on search criteria.
            When searchTerm is empty, show all records. -->
            var filteredMessages = EmployeeService.hl7Messages
            .Where(m => string.IsNullOrWhiteSpace(searchTerm) || FilterMessage(m))
            .OrderBy(m => m.MessageHeader.DateTimeOfMessage)
            .ToList();

            if (!filteredMessages.Any())
            {
                <p>No results</p>
            }
            else
            {
                @foreach (var msg in filteredMessages.Take(visibleCount))
                {
                    <RecordCard msg="@msg" />
                }

                @if (filteredMessages.Count > visibleCount)
                {
                    <div class="box" style="width:calc(90% + 30px); height:10%;">
                        <center>
                            Showing @Math.Min(filteredMessages.Count, visibleCount) of @filteredMessages.Count matching employees.<br />
                            <a class="underline" @onclick="LoadMore">Click here to see more</a>
                        </center>
                    </div>
                }
            }
        }
    </div>
</body>

<div class="bottomFade"></div>

@code {
    [Parameter] public string id { get; set; }
    private int visibleCount = 10; // Default number of visible items

    private string selectedSearchType = "Message Control ID";
    private string searchTerm = "";

    // This helper method makes it easier to perform filtering.
    private bool FilterMessage(Tools.Message m)
    {
        return selectedSearchType switch
        {
            "Message Control ID" => m.MessageHeader.MessageControlId == searchTerm,
            "MRN" => (m.PatientIdentification.PatientAccountNumber != null && m.PatientIdentification.PatientAccountNumber == searchTerm)
                       || (m.PatientIdentification.PatientIdentifierList != null && m.PatientIdentification.PatientIdentifierList.IdNumber == searchTerm),
            "Last Name" => m.PatientIdentification.PatientName.FamilyName.ToLower().Contains(searchTerm.ToLower()),
            _ => true,
        };
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            EmployeeService.InitializeRedactifyProcessor();
            _ = EmployeeService.LoadHL7RecordsAsync();
            EmployeeService.OnHL7MessagesLoaded += StateHasChanged; // Update UI when messages load
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(id))
        {
            SearchMRN(id);
        }
    }

    private void Search()
    {
        // Always reset to a default number so that an empty search term shows all records.
        visibleCount = 10;
        StateHasChanged();
    }

    private void SearchMRN(string id)
    {
        searchTerm = id;
        selectedSearchType = "MRN";
        visibleCount = 10;
        StateHasChanged();
    }

    private void LoadMore()
    {
        visibleCount += 10;
        StateHasChanged();
    }
}
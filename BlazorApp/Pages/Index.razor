@page "/"
@using BlazorApp.Data
@inject EmployeeService EmployeeService
@inject IJSRuntime JS
@using Humanizer
@using NHapi.Base.Parser

<PageTitle>Home</PageTitle>

<div class="topFade"></div>

<form>
	<input style="margin-top: 1em;" type="text" placeholder="Search an ID" @bind="EmployeeService.searchId" @bind:event="oninput" @bind:after="SearchEmployee" />
</form>
<form>
	<input type="text" placeholder="Search a Name" @bind="EmployeeService.searchName" @bind:event="oninput" @bind:after="SearchEmployee" />
</form>

<body>
	<div class="container">

		@* display 5 iMessages *@
		@if (EmployeeService.hl7Messages != null)
		{
			@foreach (var iMessage in EmployeeService.hl7Messages.Take(5))
			{
				<div class="box">
					@{
						var parser = new PipeParser();
						var messageString = parser.Encode(iMessage);
					}

					<p>@messageString</p>
				</div>
			}
		}



		@if (EmployeeService.isLoading)
		{
			<p>Loading employees, please wait...</p>
		}
		else if (EmployeeService.searchResults != null && visibleCount != 0)
		{
			foreach (Employee item in EmployeeService.searchResults.Take(visibleCount))
			{
				<div class="box">
					<EmployeeCard Employee="@item"></EmployeeCard>
					@* <a href="view" @onclick="() => EmployeeService.selectedEmployee = item" class="underline">Expand</a> *@

@* 					<div class="nav-item">
						<NavLink class="nav-link" href="view" @onclick="() => EmployeeService.selectedEmployee = item">
							<span class="oi oi-magnifying-glass" aria-hidden="true"></span> View
						</NavLink>
					</div> *@
				</div>
			}
			if (EmployeeService.searchResults.Count == 0)
			{
				<p>No results</p>
			}
			if (EmployeeService.searchResults.Count > 100 && EmployeeService.searchResults.Count > visibleCount)
			{
				<div class="box" style="width:calc(90% + 30px); height:10%;">
					<center>
						Showing @Math.Min(EmployeeService.searchResults.Count, visibleCount) of @EmployeeService.searchResults.Count matching employees.<br />
						<a class="underline" @onclick="() => visibleCount += 100">Click here to see more</a>
					</center>
				</div>
			}
		}
	</div>
</body>

<div class="bottomFade"></div>


@code {
	private int visibleCount;

	protected override async Task OnInitializedAsync()
	{
		//EmployeeService.OnEmployeesLoaded += () => refreshSearch();
		_ = LoadEmployeesInBackground();
	}

	private async Task LoadEmployeesInBackground()
	{
		await EmployeeService.LoadEmployeesAsync();
		await EmployeeService.LoadHL7RecordsAsync();
		refreshSearch();
	}

	private void refreshSearch()
	{
		if (!string.IsNullOrEmpty(EmployeeService.searchId) || !string.IsNullOrEmpty(EmployeeService.searchName)) SearchEmployee();
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool first){
		SearchEmployee();
		StateHasChanged();
	}

	private void SearchEmployee()
	{
		//Console.WriteLine("Here");
		visibleCount = 100; // Reset visibleCount whenever a new search is made.
		EmployeeService.SearchEmployees();

		if (string.IsNullOrEmpty(EmployeeService.searchId) && string.IsNullOrEmpty(EmployeeService.searchName)) visibleCount = 0;
	}
}
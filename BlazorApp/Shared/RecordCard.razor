@using System.Reflection
@using Microsoft.AspNetCore.Components
@using BlazorApp.Helpers
@using Humanizer
@using System.Collections
@using System.Text.RegularExpressions

<div class="box hl7-message">
    @{
        var typeName = msg.GetType().Name;
        var properties = msg.GetType().GetProperties();
    }
    @for (int i = 0; i < properties.Length; i++)
    {
        var property = properties[i];
        // Skip indexer properties.
        if (property.GetIndexParameters().Length > 0)
        {
            continue;
        }
        var propertyIndex = i + 1;
        var value = property.GetValue(msg);
        if (value != null)
        {
            if (value is string || value.GetType().IsPrimitive || value is DateTime)
            {
                <p title="@(GetHoverText(typeName, propertyIndex))">
                    <strong>@property.Name:</strong> @value.ToString()
                </p>
            }
            else
            {
                <div>
                    <h4 title="@(GetHoverText(typeName, propertyIndex))">
                        @property.Name
                    </h4>
                    @{
                        var subProperties = value.GetType().GetProperties();
                    }
                    @for (int j = 0; j < subProperties.Length; j++)
                    {
                        var subProp = subProperties[j];
                        // Skip indexer properties for sub-properties.
                        if (subProp.GetIndexParameters().Length > 0)
                        {
                            continue;
                        }
                        var subIndex = j + 1;
                        var subValue = subProp.GetValue(value);
                        if (subValue != null)
                        {
                            <p title="@(GetHoverText(property.PropertyType.Name, subIndex))">
                                <strong>@subProp.Name:</strong> @(RenderValueWithLinks(subProp.Name, subValue.ToString()))
                            </p>
                        }
                    }
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public object msg { get; set; } = default!;

    // Generates the hover text based on type name and index.
    private string GetHoverText(string typeName, int index, int? childIndex = null)
    {
        if (typeName == "Message")
            return ""; // or customize as needed

        return childIndex.HasValue
            ? $"{typeName}.{index}.{childIndex.Value}"
            : $"{typeName}.{index}";
    }

    private MarkupString RenderValueWithLinks(string propName, string text)
    {
        if (propName == "PatientIdentifierList")
        {
            string pattern = @"Id Number: (\S+)";
            string replacement = @"Id Number: <a class=""nav-item"" href=""/search/$1"">$1</a>";
            text = Regex.Replace(text, pattern, replacement);
        }

        // If the property name indicates that the value is an identifier,
        // replace the entire value with a clickable link.
        if (propName == "PatientAccountNumber")
        {
            string pattern = @"(\S+)";
            string replacement = @"<a class=""nav-item"" href=""/search/$1"">$1</a>";
            text = Regex.Replace(text, pattern, replacement);
        }
        return new MarkupString(text);
    }
}
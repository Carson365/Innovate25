@using BlazorApp.Helpers
@using Humanizer
@using System.Collections
@using Microsoft.AspNetCore.Components
@using System.Text.RegularExpressions

<div class="box hl7-message">
    @foreach (var segmentProperty in msg.GetType().GetProperties())
    {
        var segmentData = segmentProperty.GetValue(msg);
        if (segmentData != null)
        {
            <h4>@segmentProperty.Name</h4>
            @if (segmentData is IEnumerable enumerable && !(segmentData is string))
            {
                int index = 0;
                foreach (var item in enumerable)
                {
                    <div class="hl7-segment-item">
                        <h5>@segmentProperty.Name Item @index</h5>
                        <p>@(RenderWithLinks(item.ToString()))</p>
                    </div>
                    index++;
                }
            }
            else
            {
                <p>@(RenderWithLinks(segmentData.ToString()))</p>
            }
        }
    }
</div>

@code {
    [Parameter] public object msg { get; set; } = default!;

    private MarkupString RenderWithLinks(string text)
    {
        if (text.Contains("Patient Identifier List: Id Number: "))
        {
            string pattern = @"Patient Identifier List: Id Number: (\S+)";

            string replacement = @"Patient Identifier List: Id Number: " +
            @"<a class=""nav-item"" href=""/search/$1"">" +
                @"$1" +
            @"</a>";
            text = Regex.Replace(text, pattern, replacement);
        }
        if (text.Contains("Patient Account Number: "))
        {
            string pattern = @"Patient Account Number: (\S+)";

            string replacement = @"Patient Account Number: " +
            @"<a class=""nav-item"" href=""/search/$1"">" +
                @"$1" +
            @"</a>";
            text = Regex.Replace(text, pattern, replacement);
        }
        return new MarkupString(text);
    }
}
